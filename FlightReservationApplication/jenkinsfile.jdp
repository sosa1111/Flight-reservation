pipeline {
    agent any
    stages {
        stage('PULL') {
            steps{
                git branch: 'main', url: 'https://github.com/sosa1111/Flight-reservation.git'
            }
        }
        stage('BUILD') {
            steps{
                
               sh '''
                cd FlightReservationApplication
                mvn clean package -D skiptests=true
               '''
            }
        }
        stage('QG-TEST'){
            steps{
                
               withSonarQubeEnv(installationName:'sonarqube',credentialsId: 'sonar-cred') {
                    sh '''
                        cd FlightReservationApplication
                        mvn sonar:sonar -Dsonar.projectKey=flight-reservation-backend
                    '''
                }
            }
        }
        stage('QUALITYGATE'){
            steps{
                timeout(10) {
                   waitForQualityGate abortPipeline: true, credentialsId: 'sonar-cred'
                }               
            }
        }
        stage('DOCKER-BUILD') {
            steps{           
               sh '''  
                    cd FlightReservationApplication             
                    docker build . -t sosa1111/fr:latest
                    docker push sosa1111/fr:latest
                    docker rmi -f $(docker images -aq)
                '''
            }
        }        
        stage('DEPLOY') {
            steps{
               sh '''
                cd FlightReservationApplication                   
                    kubectl apply -f k8s/ns.yaml
                    kubectl apply -f k8s/deployment.yaml
                    kubectl apply -f k8s/hpa.yaml
                    kubectl apply -f k8s/service.yaml
                    kubectl apply -f k8s/ingress.yaml
                '''
            }
        } 
    }
    post {
        success{
            echo "pipeline completed successfully"
        }
        failure{
            echo "pipeline failed "
        }
        always{
            cleanWs()
        }
    }
}
